Production d_primary_expression[5];
Production primary_expression = { d_primary_expression, 0 };
Production d_constant[3];
Production constant = { d_constant, 0 };
Production d_enumeration_constant[1];
Production enumeration_constant = { d_enumeration_constant, 0 };
Production d_string[2];
Production string = { d_string, 0 };
Production d_generic_selection[1];
Production generic_selection = { d_generic_selection, 0 };
Production d_generic_assoc_list[2];
Production generic_assoc_list = { d_generic_assoc_list, 0 };
Production d_generic_association[2];
Production generic_association = { d_generic_association, 0 };
Production d_postfix_expression[10];
Production postfix_expression = { d_postfix_expression, 0 };
Production d_argument_expression_list[2];
Production argument_expression_list = { d_argument_expression_list, 0 };
Production d_unary_expression[7];
Production unary_expression = { d_unary_expression, 0 };
Production d_unary_operator[6];
Production unary_operator = { d_unary_operator, 0 };
Production d_cast_expression[2];
Production cast_expression = { d_cast_expression, 0 };
Production d_multiplicative_expression[4];
Production multiplicative_expression = { d_multiplicative_expression, 0 };
Production d_additive_expression[3];
Production additive_expression = { d_additive_expression, 0 };
Production d_shift_expression[3];
Production shift_expression = { d_shift_expression, 0 };
Production d_relational_expression[5];
Production relational_expression = { d_relational_expression, 0 };
Production d_equality_expression[3];
Production equality_expression = { d_equality_expression, 0 };
Production d_and_expression[2];
Production and_expression = { d_and_expression, 0 };
Production d_exclusive_or_expression[2];
Production exclusive_or_expression = { d_exclusive_or_expression, 0 };
Production d_inclusive_or_expression[2];
Production inclusive_or_expression = { d_inclusive_or_expression, 0 };
Production d_logical_and_expression[2];
Production logical_and_expression = { d_logical_and_expression, 0 };
Production d_logical_or_expression[2];
Production logical_or_expression = { d_logical_or_expression, 0 };
Production d_conditional_expression[2];
Production conditional_expression = { d_conditional_expression, 0 };
Production d_assignment_expression[2];
Production assignment_expression = { d_assignment_expression, 0 };
Production d_assignment_operator[11];
Production assignment_operator = { d_assignment_operator, 0 };
Production d_expression[2];
Production expression = { d_expression, 0 };
Production d_constant_expression[1];
Production constant_expression = { d_constant_expression, 0 };
Production d_declaration[3];
Production declaration = { d_declaration, 0 };
Production d_declaration_specifiers[10];
Production declaration_specifiers = { d_declaration_specifiers, 0 };
Production d_init_declarator_list[2];
Production init_declarator_list = { d_init_declarator_list, 0 };
Production d_init_declarator[2];
Production init_declarator = { d_init_declarator, 0 };
Production d_storage_class_specifier[6];
Production storage_class_specifier = { d_storage_class_specifier, 0 };
Production d_type_specifier[16];
Production type_specifier = { d_type_specifier, 0 };
Production d_struct_or_union_specifier[3];
Production struct_or_union_specifier = { d_struct_or_union_specifier, 0 };
Production d_struct_or_union[2];
Production struct_or_union = { d_struct_or_union, 0 };
Production d_struct_declaration_list[2];
Production struct_declaration_list = { d_struct_declaration_list, 0 };
Production d_struct_declaration[3];
Production struct_declaration = { d_struct_declaration, 0 };
Production d_specifier_qualifier_list[4];
Production specifier_qualifier_list = { d_specifier_qualifier_list, 0 };
Production d_struct_declarator_list[2];
Production struct_declarator_list = { d_struct_declarator_list, 0 };
Production d_struct_declarator[3];
Production struct_declarator = { d_struct_declarator, 0 };
Production d_enum_specifier[5];
Production enum_specifier = { d_enum_specifier, 0 };
Production d_enumerator_list[2];
Production enumerator_list = { d_enumerator_list, 0 };
Production d_enumerator[2];
Production enumerator = { d_enumerator, 0 };
Production d_atomic_type_specifier[1];
Production atomic_type_specifier = { d_atomic_type_specifier, 0 };
Production d_type_qualifier[4];
Production type_qualifier = { d_type_qualifier, 0 };
Production d_function_specifier[2];
Production function_specifier = { d_function_specifier, 0 };
Production d_alignment_specifier[2];
Production alignment_specifier = { d_alignment_specifier, 0 };
Production d_declarator[2];
Production declarator = { d_declarator, 0 };
Production d_direct_declarator[14];
Production direct_declarator = { d_direct_declarator, 0 };
Production d_pointer[4];
Production pointer = { d_pointer, 0 };
Production d_type_qualifier_list[2];
Production type_qualifier_list = { d_type_qualifier_list, 0 };
Production d_parameter_type_list[2];
Production parameter_type_list = { d_parameter_type_list, 0 };
Production d_parameter_list[2];
Production parameter_list = { d_parameter_list, 0 };
Production d_parameter_declaration[3];
Production parameter_declaration = { d_parameter_declaration, 0 };
Production d_identifier_list[2];
Production identifier_list = { d_identifier_list, 0 };
Production d_type_name[2];
Production type_name = { d_type_name, 0 };
Production d_abstract_declarator[3];
Production abstract_declarator = { d_abstract_declarator, 0 };
Production d_direct_abstract_declarator[21];
Production direct_abstract_declarator = { d_direct_abstract_declarator, 0 };
Production d_initializer[3];
Production initializer = { d_initializer, 0 };
Production d_initializer_list[4];
Production initializer_list = { d_initializer_list, 0 };
Production d_designation[1];
Production designation = { d_designation, 0 };
Production d_designator_list[2];
Production designator_list = { d_designator_list, 0 };
Production d_designator[2];
Production designator = { d_designator, 0 };
Production d_static_assert_declaration[1];
Production static_assert_declaration = { d_static_assert_declaration, 0 };
Production d_statement[6];
Production statement = { d_statement, 0 };
Production d_labeled_statement[3];
Production labeled_statement = { d_labeled_statement, 0 };
Production d_compound_statement[2];
Production compound_statement = { d_compound_statement, 0 };
Production d_block_item_list[2];
Production block_item_list = { d_block_item_list, 0 };
Production d_block_item[2];
Production block_item = { d_block_item, 0 };
Production d_expression_statement[2];
Production expression_statement = { d_expression_statement, 0 };
Production d_selection_statement[3];
Production selection_statement = { d_selection_statement, 0 };
Production d_iteration_statement[6];
Production iteration_statement = { d_iteration_statement, 0 };
Production d_jump_statement[5];
Production jump_statement = { d_jump_statement, 0 };
Production d_translation_unit[2];
Production translation_unit = { d_translation_unit, 0 };
Production d_external_declaration[2];
Production external_declaration = { d_external_declaration, 0 };
Production d_function_definition[2];
Production function_definition = { d_function_definition, 0 };
Production d_declaration_list[2];
Production declaration_list = { d_declaration_list, 0 };

d_primary_expression[0] = T[IDENTIFIER];
d_primary_expression[1] = constant;
d_primary_expression[2] = string;
d_primary_expression[3] = (Production){ (Production[]){ C['('], expression, C[')'] }, 0 };
d_primary_expression[4] = generic_selection;
d_constant[0] = T[I_CONSTANT];
d_constant[1] = T[F_CONSTANT];
d_constant[2] = T[ENUMERATION_CONSTANT];
d_enumeration_constant[0] = T[IDENTIFIER];
d_string[0] = T[STRING_LITERAL];
d_string[1] = T[FUNC_NAME];
d_generic_selection[0] = (Production){ (Production[]){ T[GENERIC], C['('], assignment_expression, C[','], generic_assoc_list, C[')'] }, 0 };
d_generic_assoc_list[0] = generic_association;
d_generic_assoc_list[1] = (Production){ (Production[]){ generic_assoc_list, C[','], generic_association }, 0 };
d_generic_association[0] = (Production){ (Production[]){ type_name, C[':'], assignment_expression }, 0 };
d_generic_association[1] = (Production){ (Production[]){ T[DEFAULT], C[':'], assignment_expression }, 0 };
d_postfix_expression[0] = primary_expression;
d_postfix_expression[1] = (Production){ (Production[]){ postfix_expression, C['['], expression, C[']'] }, 0 };
d_postfix_expression[2] = (Production){ (Production[]){ postfix_expression, C['('], C[')'] }, 0 };
d_postfix_expression[3] = (Production){ (Production[]){ postfix_expression, C['('], argument_expression_list, C[')'] }, 0 };
d_postfix_expression[4] = (Production){ (Production[]){ postfix_expression, C['.'], T[IDENTIFIER] }, 0 };
d_postfix_expression[5] = (Production){ (Production[]){ postfix_expression, T[PTR_OP], T[IDENTIFIER] }, 0 };
d_postfix_expression[6] = (Production){ (Production[]){ postfix_expression, T[INC_OP] }, 0 };
d_postfix_expression[7] = (Production){ (Production[]){ postfix_expression, T[DEC_OP] }, 0 };
d_postfix_expression[8] = (Production){ (Production[]){ C['('], type_name, C[')'], C['{'], initializer_list, C['}'] }, 0 };
d_postfix_expression[9] = (Production){ (Production[]){ C['('], type_name, C[')'], C['{'], initializer_list, C[','], C['}'] }, 0 };
d_argument_expression_list[0] = assignment_expression;
d_argument_expression_list[1] = (Production){ (Production[]){ argument_expression_list, C[','], assignment_expression }, 0 };
d_unary_expression[0] = postfix_expression;
d_unary_expression[1] = (Production){ (Production[]){ T[INC_OP], unary_expression }, 0 };
d_unary_expression[2] = (Production){ (Production[]){ T[DEC_OP], unary_expression }, 0 };
d_unary_expression[3] = (Production){ (Production[]){ unary_operator, cast_expression }, 0 };
d_unary_expression[4] = (Production){ (Production[]){ T[SIZEOF], unary_expression }, 0 };
d_unary_expression[5] = (Production){ (Production[]){ T[SIZEOF], C['('], type_name, C[')'] }, 0 };
d_unary_expression[6] = (Production){ (Production[]){ T[ALIGNOF], C['('], type_name, C[')'] }, 0 };
d_unary_operator[0] = C['&'];
d_unary_operator[1] = C['*'];
d_unary_operator[2] = C['+'];
d_unary_operator[3] = C['-'];
d_unary_operator[4] = C['~'];
d_unary_operator[5] = C['!'];
d_cast_expression[0] = unary_expression;
d_cast_expression[1] = (Production){ (Production[]){ C['('], type_name, C[')'], cast_expression }, 0 };
d_multiplicative_expression[0] = cast_expression;
d_multiplicative_expression[1] = (Production){ (Production[]){ multiplicative_expression, C['*'], cast_expression }, 0 };
d_multiplicative_expression[2] = (Production){ (Production[]){ multiplicative_expression, C['/'], cast_expression }, 0 };
d_multiplicative_expression[3] = (Production){ (Production[]){ multiplicative_expression, C['%'], cast_expression }, 0 };
d_additive_expression[0] = multiplicative_expression;
d_additive_expression[1] = (Production){ (Production[]){ additive_expression, C['+'], multiplicative_expression }, 0 };
d_additive_expression[2] = (Production){ (Production[]){ additive_expression, C['-'], multiplicative_expression }, 0 };
d_shift_expression[0] = additive_expression;
d_shift_expression[1] = (Production){ (Production[]){ shift_expression, T[LEFT_OP], additive_expression }, 0 };
d_shift_expression[2] = (Production){ (Production[]){ shift_expression, T[RIGHT_OP], additive_expression }, 0 };
d_relational_expression[0] = shift_expression;
d_relational_expression[1] = (Production){ (Production[]){ relational_expression, C['<'], shift_expression }, 0 };
d_relational_expression[2] = (Production){ (Production[]){ relational_expression, C['>'], shift_expression }, 0 };
d_relational_expression[3] = (Production){ (Production[]){ relational_expression, T[LE_OP], shift_expression }, 0 };
d_relational_expression[4] = (Production){ (Production[]){ relational_expression, T[GE_OP], shift_expression }, 0 };
d_equality_expression[0] = relational_expression;
d_equality_expression[1] = (Production){ (Production[]){ equality_expression, T[EQ_OP], relational_expression }, 0 };
d_equality_expression[2] = (Production){ (Production[]){ equality_expression, T[NE_OP], relational_expression }, 0 };
d_and_expression[0] = equality_expression;
d_and_expression[1] = (Production){ (Production[]){ and_expression, C['&'], equality_expression }, 0 };
d_exclusive_or_expression[0] = and_expression;
d_exclusive_or_expression[1] = (Production){ (Production[]){ exclusive_or_expression, C['^'], and_expression }, 0 };
d_inclusive_or_expression[0] = exclusive_or_expression;
d_inclusive_or_expression[1] = (Production){ (Production[]){ inclusive_or_expression, C['|'], exclusive_or_expression }, 0 };
d_logical_and_expression[0] = inclusive_or_expression;
d_logical_and_expression[1] = (Production){ (Production[]){ logical_and_expression, T[AND_OP], inclusive_or_expression }, 0 };
d_logical_or_expression[0] = logical_and_expression;
d_logical_or_expression[1] = (Production){ (Production[]){ logical_or_expression, T[OR_OP], logical_and_expression }, 0 };
d_conditional_expression[0] = logical_or_expression;
d_conditional_expression[1] = (Production){ (Production[]){ logical_or_expression, C['?'], expression, C[':'], conditional_expression }, 0 };
d_assignment_expression[0] = conditional_expression;
d_assignment_expression[1] = (Production){ (Production[]){ unary_expression, assignment_operator, assignment_expression }, 0 };
d_assignment_operator[0] = C['='];
d_assignment_operator[1] = T[MUL_ASSIGN];
d_assignment_operator[2] = T[DIV_ASSIGN];
d_assignment_operator[3] = T[MOD_ASSIGN];
d_assignment_operator[4] = T[ADD_ASSIGN];
d_assignment_operator[5] = T[SUB_ASSIGN];
d_assignment_operator[6] = T[LEFT_ASSIGN];
d_assignment_operator[7] = T[RIGHT_ASSIGN];
d_assignment_operator[8] = T[AND_ASSIGN];
d_assignment_operator[9] = T[XOR_ASSIGN];
d_assignment_operator[10] = T[OR_ASSIGN];
d_expression[0] = assignment_expression;
d_expression[1] = (Production){ (Production[]){ expression, C[','], assignment_expression }, 0 };
d_constant_expression[0] = conditional_expression;
d_declaration[0] = (Production){ (Production[]){ declaration_specifiers, C[';'] }, 0 };
d_declaration[1] = (Production){ (Production[]){ declaration_specifiers, init_declarator_list, C[';'] }, 0 };
d_declaration[2] = static_assert_declaration;
d_declaration_specifiers[0] = (Production){ (Production[]){ storage_class_specifier, declaration_specifiers }, 0 };
d_declaration_specifiers[1] = storage_class_specifier;
d_declaration_specifiers[2] = (Production){ (Production[]){ type_specifier, declaration_specifiers }, 0 };
d_declaration_specifiers[3] = type_specifier;
d_declaration_specifiers[4] = (Production){ (Production[]){ type_qualifier, declaration_specifiers }, 0 };
d_declaration_specifiers[5] = type_qualifier;
d_declaration_specifiers[6] = (Production){ (Production[]){ function_specifier, declaration_specifiers }, 0 };
d_declaration_specifiers[7] = function_specifier;
d_declaration_specifiers[8] = (Production){ (Production[]){ alignment_specifier, declaration_specifiers }, 0 };
d_declaration_specifiers[9] = alignment_specifier;
d_init_declarator_list[0] = init_declarator;
d_init_declarator_list[1] = (Production){ (Production[]){ init_declarator_list, C[','], init_declarator }, 0 };
d_init_declarator[0] = (Production){ (Production[]){ declarator, C['='], initializer }, 0 };
d_init_declarator[1] = declarator;
d_storage_class_specifier[0] = T[TYPEDEF];
d_storage_class_specifier[1] = T[EXTERN];
d_storage_class_specifier[2] = T[STATIC];
d_storage_class_specifier[3] = T[THREAD_LOCAL];
d_storage_class_specifier[4] = T[AUTO];
d_storage_class_specifier[5] = T[REGISTER];
d_type_specifier[0] = T[VOID];
d_type_specifier[1] = T[CHAR];
d_type_specifier[2] = T[SHORT];
d_type_specifier[3] = T[INT];
d_type_specifier[4] = T[LONG];
d_type_specifier[5] = T[FLOAT];
d_type_specifier[6] = T[DOUBLE];
d_type_specifier[7] = T[SIGNED];
d_type_specifier[8] = T[UNSIGNED];
d_type_specifier[9] = T[BOOL];
d_type_specifier[10] = T[COMPLEX];
d_type_specifier[11] = T[IMAGINARY];
d_type_specifier[12] = atomic_type_specifier;
d_type_specifier[13] = struct_or_union_specifier;
d_type_specifier[14] = enum_specifier;
d_type_specifier[15] = T[TYPEDEF_NAME];
d_struct_or_union_specifier[0] = (Production){ (Production[]){ struct_or_union, C['{'], struct_declaration_list, C['}'] }, 0 };
d_struct_or_union_specifier[1] = (Production){ (Production[]){ struct_or_union, T[IDENTIFIER], C['{'], struct_declaration_list, C['}'] }, 0 };
d_struct_or_union_specifier[2] = (Production){ (Production[]){ struct_or_union, T[IDENTIFIER] }, 0 };
d_struct_or_union[0] = T[STRUCT];
d_struct_or_union[1] = T[UNION];
d_struct_declaration_list[0] = struct_declaration;
d_struct_declaration_list[1] = (Production){ (Production[]){ struct_declaration_list, struct_declaration }, 0 };
d_struct_declaration[0] = (Production){ (Production[]){ specifier_qualifier_list, C[';'] }, 0 };
d_struct_declaration[1] = (Production){ (Production[]){ specifier_qualifier_list, struct_declarator_list, C[';'] }, 0 };
d_struct_declaration[2] = static_assert_declaration;
d_specifier_qualifier_list[0] = (Production){ (Production[]){ type_specifier, specifier_qualifier_list }, 0 };
d_specifier_qualifier_list[1] = type_specifier;
d_specifier_qualifier_list[2] = (Production){ (Production[]){ type_qualifier, specifier_qualifier_list }, 0 };
d_specifier_qualifier_list[3] = type_qualifier;
d_struct_declarator_list[0] = struct_declarator;
d_struct_declarator_list[1] = (Production){ (Production[]){ struct_declarator_list, C[','], struct_declarator }, 0 };
d_struct_declarator[0] = (Production){ (Production[]){ C[':'], constant_expression }, 0 };
d_struct_declarator[1] = (Production){ (Production[]){ declarator, C[':'], constant_expression }, 0 };
d_struct_declarator[2] = declarator;
d_enum_specifier[0] = (Production){ (Production[]){ T[ENUM], C['{'], enumerator_list, C['}'] }, 0 };
d_enum_specifier[1] = (Production){ (Production[]){ T[ENUM], C['{'], enumerator_list, C[','], C['}'] }, 0 };
d_enum_specifier[2] = (Production){ (Production[]){ T[ENUM], T[IDENTIFIER], C['{'], enumerator_list, C['}'] }, 0 };
d_enum_specifier[3] = (Production){ (Production[]){ T[ENUM], T[IDENTIFIER], C['{'], enumerator_list, C[','], C['}'] }, 0 };
d_enum_specifier[4] = (Production){ (Production[]){ T[ENUM], T[IDENTIFIER] }, 0 };
d_enumerator_list[0] = enumerator;
d_enumerator_list[1] = (Production){ (Production[]){ enumerator_list, C[','], enumerator }, 0 };
d_enumerator[0] = (Production){ (Production[]){ enumeration_constant, C['='], constant_expression }, 0 };
d_enumerator[1] = enumeration_constant;
d_atomic_type_specifier[0] = (Production){ (Production[]){ T[ATOMIC], C['('], type_name, C[')'] }, 0 };
d_type_qualifier[0] = T[CONST];
d_type_qualifier[1] = T[RESTRICT];
d_type_qualifier[2] = T[VOLATILE];
d_type_qualifier[3] = T[ATOMIC];
d_function_specifier[0] = T[INLINE];
d_function_specifier[1] = T[NORETURN];
d_alignment_specifier[0] = (Production){ (Production[]){ T[ALIGNAS], C['('], type_name, C[')'] }, 0 };
d_alignment_specifier[1] = (Production){ (Production[]){ T[ALIGNAS], C['('], constant_expression, C[')'] }, 0 };
d_declarator[0] = (Production){ (Production[]){ pointer, direct_declarator }, 0 };
d_declarator[1] = direct_declarator;
d_direct_declarator[0] = T[IDENTIFIER];
d_direct_declarator[1] = (Production){ (Production[]){ C['('], declarator, C[')'] }, 0 };
d_direct_declarator[2] = (Production){ (Production[]){ direct_declarator, C['['], C[']'] }, 0 };
d_direct_declarator[3] = (Production){ (Production[]){ direct_declarator, C['['], C['*'], C[']'] }, 0 };
d_direct_declarator[4] = (Production){ (Production[]){ direct_declarator, C['['], T[STATIC], type_qualifier_list, assignment_expression, C[']'] }, 0 };
d_direct_declarator[5] = (Production){ (Production[]){ direct_declarator, C['['], T[STATIC], assignment_expression, C[']'] }, 0 };
d_direct_declarator[6] = (Production){ (Production[]){ direct_declarator, C['['], type_qualifier_list, C['*'], C[']'] }, 0 };
d_direct_declarator[7] = (Production){ (Production[]){ direct_declarator, C['['], type_qualifier_list, T[STATIC], assignment_expression, C[']'] }, 0 };
d_direct_declarator[8] = (Production){ (Production[]){ direct_declarator, C['['], type_qualifier_list, assignment_expression, C[']'] }, 0 };
d_direct_declarator[9] = (Production){ (Production[]){ direct_declarator, C['['], type_qualifier_list, C[']'] }, 0 };
d_direct_declarator[10] = (Production){ (Production[]){ direct_declarator, C['['], assignment_expression, C[']'] }, 0 };
d_direct_declarator[11] = (Production){ (Production[]){ direct_declarator, C['('], parameter_type_list, C[')'] }, 0 };
d_direct_declarator[12] = (Production){ (Production[]){ direct_declarator, C['('], C[')'] }, 0 };
d_direct_declarator[13] = (Production){ (Production[]){ direct_declarator, C['('], identifier_list, C[')'] }, 0 };
d_pointer[0] = (Production){ (Production[]){ C['*'], type_qualifier_list, pointer }, 0 };
d_pointer[1] = (Production){ (Production[]){ C['*'], type_qualifier_list }, 0 };
d_pointer[2] = (Production){ (Production[]){ C['*'], pointer }, 0 };
d_pointer[3] = C['*'];
d_type_qualifier_list[0] = type_qualifier;
d_type_qualifier_list[1] = (Production){ (Production[]){ type_qualifier_list, type_qualifier }, 0 };
d_parameter_type_list[0] = (Production){ (Production[]){ parameter_list, C[','], T[ELLIPSIS] }, 0 };
d_parameter_type_list[1] = parameter_list;
d_parameter_list[0] = parameter_declaration;
d_parameter_list[1] = (Production){ (Production[]){ parameter_list, C[','], parameter_declaration }, 0 };
d_parameter_declaration[0] = (Production){ (Production[]){ declaration_specifiers, declarator }, 0 };
d_parameter_declaration[1] = (Production){ (Production[]){ declaration_specifiers, abstract_declarator }, 0 };
d_parameter_declaration[2] = declaration_specifiers;
d_identifier_list[0] = T[IDENTIFIER];
d_identifier_list[1] = (Production){ (Production[]){ identifier_list, C[','], T[IDENTIFIER] }, 0 };
d_type_name[0] = (Production){ (Production[]){ specifier_qualifier_list, abstract_declarator }, 0 };
d_type_name[1] = specifier_qualifier_list;
d_abstract_declarator[0] = (Production){ (Production[]){ pointer, direct_abstract_declarator }, 0 };
d_abstract_declarator[1] = pointer;
d_abstract_declarator[2] = direct_abstract_declarator;
d_direct_abstract_declarator[0] = (Production){ (Production[]){ C['('], abstract_declarator, C[')'] }, 0 };
d_direct_abstract_declarator[1] = (Production){ (Production[]){ C['['], C[']'] }, 0 };
d_direct_abstract_declarator[2] = (Production){ (Production[]){ C['['], C['*'], C[']'] }, 0 };
d_direct_abstract_declarator[3] = (Production){ (Production[]){ C['['], T[STATIC], type_qualifier_list, assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[4] = (Production){ (Production[]){ C['['], T[STATIC], assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[5] = (Production){ (Production[]){ C['['], type_qualifier_list, T[STATIC], assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[6] = (Production){ (Production[]){ C['['], type_qualifier_list, assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[7] = (Production){ (Production[]){ C['['], type_qualifier_list, C[']'] }, 0 };
d_direct_abstract_declarator[8] = (Production){ (Production[]){ C['['], assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[9] = (Production){ (Production[]){ direct_abstract_declarator, C['['], C[']'] }, 0 };
d_direct_abstract_declarator[10] = (Production){ (Production[]){ direct_abstract_declarator, C['['], C['*'], C[']'] }, 0 };
d_direct_abstract_declarator[11] = (Production){ (Production[]){ direct_abstract_declarator, C['['], T[STATIC], type_qualifier_list, assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[12] = (Production){ (Production[]){ direct_abstract_declarator, C['['], T[STATIC], assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[13] = (Production){ (Production[]){ direct_abstract_declarator, C['['], type_qualifier_list, assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[14] = (Production){ (Production[]){ direct_abstract_declarator, C['['], type_qualifier_list, T[STATIC], assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[15] = (Production){ (Production[]){ direct_abstract_declarator, C['['], type_qualifier_list, C[']'] }, 0 };
d_direct_abstract_declarator[16] = (Production){ (Production[]){ direct_abstract_declarator, C['['], assignment_expression, C[']'] }, 0 };
d_direct_abstract_declarator[17] = (Production){ (Production[]){ C['('], C[')'] }, 0 };
d_direct_abstract_declarator[18] = (Production){ (Production[]){ C['('], parameter_type_list, C[')'] }, 0 };
d_direct_abstract_declarator[19] = (Production){ (Production[]){ direct_abstract_declarator, C['('], C[')'] }, 0 };
d_direct_abstract_declarator[20] = (Production){ (Production[]){ direct_abstract_declarator, C['('], parameter_type_list, C[')'] }, 0 };
d_initializer[0] = (Production){ (Production[]){ C['{'], initializer_list, C['}'] }, 0 };
d_initializer[1] = (Production){ (Production[]){ C['{'], initializer_list, C[','], C['}'] }, 0 };
d_initializer[2] = assignment_expression;
d_initializer_list[0] = (Production){ (Production[]){ designation, initializer }, 0 };
d_initializer_list[1] = initializer;
d_initializer_list[2] = (Production){ (Production[]){ initializer_list, C[','], designation, initializer }, 0 };
d_initializer_list[3] = (Production){ (Production[]){ initializer_list, C[','], initializer }, 0 };
d_designation[0] = (Production){ (Production[]){ designator_list, C['='] }, 0 };
d_designator_list[0] = designator;
d_designator_list[1] = (Production){ (Production[]){ designator_list, designator }, 0 };
d_designator[0] = (Production){ (Production[]){ C['['], constant_expression, C[']'] }, 0 };
d_designator[1] = (Production){ (Production[]){ C['.'], T[IDENTIFIER] }, 0 };
d_static_assert_declaration[0] = (Production){ (Production[]){ T[STATIC_ASSERT], C['('], constant_expression, C[','], T[STRING_LITERAL], C[')'], C[';'] }, 0 };
d_statement[0] = labeled_statement;
d_statement[1] = compound_statement;
d_statement[2] = expression_statement;
d_statement[3] = selection_statement;
d_statement[4] = iteration_statement;
d_statement[5] = jump_statement;
d_labeled_statement[0] = (Production){ (Production[]){ T[IDENTIFIER], C[':'], statement }, 0 };
d_labeled_statement[1] = (Production){ (Production[]){ T[CASE], constant_expression, C[':'], statement }, 0 };
d_labeled_statement[2] = (Production){ (Production[]){ T[DEFAULT], C[':'], statement }, 0 };
d_compound_statement[0] = (Production){ (Production[]){ C['{'], C['}'] }, 0 };
d_compound_statement[1] = (Production){ (Production[]){ C['{'], block_item_list, C['}'] }, 0 };
d_block_item_list[0] = block_item;
d_block_item_list[1] = (Production){ (Production[]){ block_item_list, block_item }, 0 };
d_block_item[0] = declaration;
d_block_item[1] = statement;
d_expression_statement[0] = C[';'];
d_expression_statement[1] = (Production){ (Production[]){ expression, C[';'] }, 0 };
d_selection_statement[0] = (Production){ (Production[]){ T[IF], C['('], expression, C[')'], statement, T[ELSE], statement }, 0 };
d_selection_statement[1] = (Production){ (Production[]){ T[IF], C['('], expression, C[')'], statement }, 0 };
d_selection_statement[2] = (Production){ (Production[]){ T[SWITCH], C['('], expression, C[')'], statement }, 0 };
d_iteration_statement[0] = (Production){ (Production[]){ T[WHILE], C['('], expression, C[')'], statement }, 0 };
d_iteration_statement[1] = (Production){ (Production[]){ T[DO], statement, T[WHILE], C['('], expression, C[')'], C[';'] }, 0 };
d_iteration_statement[2] = (Production){ (Production[]){ T[FOR], C['('], expression_statement, expression_statement, C[')'], statement }, 0 };
d_iteration_statement[3] = (Production){ (Production[]){ T[FOR], C['('], expression_statement, expression_statement, expression, C[')'], statement }, 0 };
d_iteration_statement[4] = (Production){ (Production[]){ T[FOR], C['('], declaration, expression_statement, C[')'], statement }, 0 };
d_iteration_statement[5] = (Production){ (Production[]){ T[FOR], C['('], declaration, expression_statement, expression, C[')'], statement }, 0 };
d_jump_statement[0] = (Production){ (Production[]){ T[GOTO], T[IDENTIFIER], C[';'] }, 0 };
d_jump_statement[1] = (Production){ (Production[]){ T[CONTINUE], C[';'] }, 0 };
d_jump_statement[2] = (Production){ (Production[]){ T[BREAK], C[';'] }, 0 };
d_jump_statement[3] = (Production){ (Production[]){ T[RETURN], C[';'] }, 0 };
d_jump_statement[4] = (Production){ (Production[]){ T[RETURN], expression, C[';'] }, 0 };
d_translation_unit[0] = external_declaration;
d_translation_unit[1] = (Production){ (Production[]){ translation_unit, external_declaration }, 0 };
d_external_declaration[0] = function_definition;
d_external_declaration[1] = declaration;
d_function_definition[0] = (Production){ (Production[]){ declaration_specifiers, declarator, declaration_list, compound_statement }, 0 };
d_function_definition[1] = (Production){ (Production[]){ declaration_specifiers, declarator, compound_statement }, 0 };
d_declaration_list[0] = declaration;
d_declaration_list[1] = (Production){ (Production[]){ declaration_list, declaration }, 0 };